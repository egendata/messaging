# env:
# - DOCKER_COMPOSE_VERSION=1.23.2

# The jobs section declares jobs available in this build context
jobs:
  include:
  # - stage: "code-coverage"
  #   cache:
  #     npm: true
  #     directories:
  #     - ~/.nvm
  #   language: node_js
  #   before_install:
  #   # Install a newer version of docker-compose than the one provided by Travis
  #   - if ! [ -x "$(command -v lerna)" ]; then npm install -g lerna; fi
  #   install:
  #   - npm ci
  #   before_script:
  #   - curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
  #   - chmod +x ./cc-test-reporter
  #   - ./cc-test-reporter before-build
  #   script:
  #   - npm run test:unit -- -- --coverage
  #   after_script:
  #   - for f in */; do
  #       if [ -d $f ] && [ -d $f/coverage ]; then
  #         echo $f;
  #         ./cc-test-reporter format-coverage -t lcov -o coverage/coverage.${f//\//-}.json $f/coverage/lcov.info;
  #       fi
  #     done;
  #     ./cc-test-reporter sum-coverage -o coverage/coverage.total.json coverage/coverage.*.json;
  #     ./cc-test-reporter upload-coverage -i coverage/coverage.total.json;

  # lint and run tests
  - stage: "lint-and-test"
    name: "Lint, run tests"
    cache:
      npm: true
      directories:
      - ~/.nvm
    language: node_js
    install:
    - npm ci
    script:
    - npm run testAndLint

  # build and deploy things
  # - stage: deliver
  #   name: "Build and deploy code that has been updated"
  #   language: node_js
  #   cache:
  #     directories:
  #     - ~/.cache/docker
  #   install:
  #   # Install a new version of the openshift cli
  #   - mkdir -p /opt/openshift
  #   - wget -qO- https://github.com/openshift/origin/releases/download/v3.11.0/openshift-origin-client-tools-v3.11.0-0cbc58b-linux-64bit.tar.gz | tar xvzf - -C /opt/openshift --strip-components=1
  #   - export PATH=$PATH:/opt/openshift
  #   - echo $OPENSHIFT_CERT | base64 --decode > /tmp/openshift.crt
  #   services:
  #   # Require docker to be running in the build context
  #   - docker
  #   script:
  #   # Authenticate towards Docker Hub
  #   - docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
  #   # Authenticate towards OpenShift
  #   - oc login $OPENSHIFT_URL --token=$OPENSHIFT_TOKEN --certificate-authority=/tmp/openshift.crt

  #   # If this is not a tag, build images tagged :latest
  #   - export PHASE="ci"
  #   # If this is a tag, build images tagged v<tag> and :latest-tag
  #   - if [ ! -z "$TRAVIS_TAG" ]; then export PHASE="test"; fi

  #   - bash .deliver-$PHASE.bash app/ jobtechswe/mydata-app
  #   - bash .deliver-$PHASE.bash . jobtechswe/mydata-operator operator/Dockerfile
  #   - bash .deliver-$PHASE.bash . jobtechswe/mydata-cv examples/cv/Dockerfile
  #   - bash .deliver-$PHASE.bash . jobtechswe/mydata-natreg examples/national-registration/Dockerfile

  #   - echo "Redeploying..."
  #   - oc rollout latest operator-$PHASE -n mydata
  #   - oc rollout latest cv-$PHASE -n mydata
  #   - oc rollout latest natreg-$PHASE -n mydata
  #   after_script:
  #   # ...and finally remove cached credentials
  #   - oc logout
  #   - docker logout
  #   - rm /tmp/openshift.crt

# Flow control
# This section defines the order in which stages are run and when to run certain stages
stages:
# - name: code-coverage
#   if: (branch = master AND type != pull_request) OR tag IS present
- name: lint-and-test
  if: branch != master
# - name: deliver
#   if: (branch = master AND type != pull_request) OR tag IS present

notifications:
  email:
    on_success: never
    on_failure: change
